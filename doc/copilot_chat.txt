*copilot-chat.txt*  Copilot Chat inside of vim

Author:  Dan Bradbury <https://danbradbury.net/>
License: Same terms as Vim itself (see |license|)

==============================================================================
CONTENTS                                               *copilot-chat-contents*

    1. Introduction ............................ |copilot-chat-introduction|
    2. Requirements ............................ |copilot-chat-requirements|
    3. Setup ................................... |copilot-chat-setup|
    4. Commands ................................ |copilot-chat-commands|
    5. Key Mappings ............................ |copilot-chat-mappings|
        5.1 Plugin Keys......................... |copilot-chat-plugin-keys|
    6. Features ................................ |copilot-chat-features|
        6.1 Model Selection .................... |copilot-chat-models|
        6.2 Add Selection to Chat .............. |copilot-chat-add-selection|
        6.3 Chat History Management ............ |copilot-chat-history|
        6.4 Prompt Templates ................... |copilot-chat-templates|
    7. Configuration ........................... |copilot-chat-configuration|
    7.1. AI configuration....................... |copilot-chat-ai-configuration|
    7.2. VIM configuration.......................|copilot-chat-vim-configuration|
    8. Troubleshooting ......................... |copilot-chat-troubleshooting|

==============================================================================
1. Introduction                                     *copilot-chat-introduction*

Copilot Chat for Vim provides GitHub Copilot chat functionality without having
to leave Vim. This plugin is for Vim users who want to interact with GitHub
Copilot's AI assistant directly from within their editor.

==============================================================================
2. Requirements                                     *copilot-chat-requirements*

- Vim 9.0.0185 or newer
- NerdFonts (optional for pretty icons)
- GitHub account with Copilot access

==============================================================================
3. Setup                                                *copilot-chat-setup*

1. Run |:CopilotChatOpen| to open a chat window. You will be prompted to set up
   your device on first use.

2. Follow the authentication prompt:
   - You'll be shown a URL to visit and a code to enter
   - Visit the URL in your browser and enter the code
   - Return to Vim and press Enter to continue

3. Write your prompt under the line separator and press <Enter> in normal mode
   or use |:SubmitChatMessage|

4. You should see "Waiting for response.." in the buffer to indicate work is
   being done in the background

5. Enjoy your conversation with Copilot!

==============================================================================
4. Commands                                           *copilot-chat-commands*

                                                              *:CopilotChatOpen*
:CopilotChatOpen         Opens a new Copilot Chat window (default vsplit right)

                                                        *:CopilotChat <input>*
:CopilotChat <input>     Launches a new Copilot chat with your input as the 
                         initial prompt

                                                        *:SubmitChatMessage*
:SubmitChatMessage       Submits the current prompt to Copilot

                                                        *:CopilotChatReset*
:CopilotChatReset        Resets the current chat window to its initial state,
                         clearing all conversation history

                                                           *:CopilotConfig*
:CopilotConfig           Opens the 'config.json' file for modifying default
                         settings when opening a new CopilotChat window

                                                           *:CopilotModels*
:CopilotModels           Views available models and allows selecting the active
                         model for future chats

                                                            *:SelectModel*
:SelectModel             Selects the current line's model as the default model

                                                       *:CopilotChatSave*
:CopilotChatSave [name]  Saves the current chat history with the provided name.
                         If no name is provided, a timestamp will be used.

                                                       *:CopilotChatLoad*
:CopilotChatLoad [name]  Loads a previously saved chat history with the
                         provided name. If no name is provided, shows a list
                         of available chat histories to choose from.

                                                       *:CopilotChatList*
:CopilotChatList         Lists all saved chat histories.

                                                       *:CopilotGotoChat*
:CopilotGotoChat	 Goto the Copilot Chat window, if it exists.

==============================================================================
5. Key Mappings                                       *copilot-chat-mappings*

Default chat window mappings:
    <CR>             Submits current prompt (normal mode)
    <Leader>cs       Submits current prompt (normal mode)

Default in models-window mapping
    <CR>             Selects the model on current line for future chat use

These mappings can be customized by adding your own mappings in your vimrc.

In order to disable all default mapping, set `g:copilot_chat_disable_mappings`
to 1 in your vimrc:
>
    let g:copilot_chat_disable_mappings = 1

5.1 Plugin Keys                                       *copilot-chat-plugin-keys*

<Plug>CopilotChatAddSelection  Adds a selected text to active chat window
                               buffer

==============================================================================
6. Features                                           *copilot-chat-features*

------------------------------------------------------------------------------
6.1 Model Selection                                   *copilot-chat-models*

The plugin allows you to choose between different Copilot AI models:

1. Use |:CopilotModels| to view available models
2. Navigate to the model you want to use
3. Press <Enter> to select it
4. New chats will use the selected model

The active model will be highlighted in the models list.

------------------------------------------------------------------------------
6.2 Add Selection to Chat                       *copilot-chat-add-selection*

This feature allows you to quickly send code selections to your active Copilot
Chat window:

1. Select code in visual mode
2. Press <Leader>a (default mapping)
3. The selection will be added to the active chat window inside a codeblock
   with the appropriate filetype

This is useful for getting help, explanations, or suggestions about specific
portions of your code.

------------------------------------------------------------------------------
6.3 Chat History Management                         *copilot-chat-history*

Copilot Chat allows you to save, list, and load your chat conversations:

Saving Chat History:
- Use |:CopilotChatSave| [name] to save the current chat history
- If no name is provided, a timestamp will be used automatically
- History files are stored in `~/.vim/copilot-chat/history/` as JSON files

Loading Chat History:
- Use |:CopilotChatLoad| [name] to load a previously saved chat
- If no name is provided, a list of available chat histories will be shown
- When loading a history, the current chat window content is replaced with
  the saved conversation

Listing Saved Histories:
- Use |:CopilotChatList| to view all saved chat histories
- This displays a list of all available chat history files with their names
  and timestamps

Example workflow:
1. Have a productive conversation with Copilot
2. Save it with a descriptive name: `:CopilotChatSave refactoring-tips`
3. Later, list your saved chats with `:CopilotChatList`
4. Load a specific conversation: `:CopilotChatLoad refactoring-tips`

This feature is particularly useful for:
- Saving important troubleshooting or educational conversations
- Creating a library of reference conversations for common tasks
- Continuing conversations that were interrupted

------------------------------------------------------------------------------
6.4 Prompt Templates                               *copilot-chat-templates*

Copilot Chat supports custom prompt templates that can be quickly accessed
during chat sessions:

Using templates:
- In the chat window, start a line with `> TEMPLATE_NAME`
- The template name will be automatically replaced with the full template
  content before sending to Copilot
- Example: `> explain` would expand to the full explanation template

Managing templates:
1. Open the config with |:CopilotConfig|
2. Add templates to the "prompts" object in config.json:
>
    {
      "model": "gpt-4",
      "prompts": {
        "explain": "Explain how this code works in detail:",
        "refactor": "Suggest improvements and refactoring for this code:",
        "docs": "Generate documentation for this code:"
      }
    }
<

Example usage:
>
    > explain

    function validateUser() {
      // code to validate
    }
<
This will send the full template text + your code to Copilot.

==============================================================================
7. Configuration                                 *copilot-chat-configuration*

------------------------------------------------------------------------------
7.1 AI Configuration                               *ai-configuration*

The plugin stores configuration in `~/.vim/copilot-chat/config.json`.

To modify the configuration:
1. Run |:CopilotConfig| to open the configuration file
2. Edit the configuration
3. Save the file

Configuration options:
- `model`: The default AI model to use (e.g., "gpt-4o")
- `prompts`: An object containing prompt templates

Example configuration:
>
    {
      "model": "gpt-4o",
      "prompts": {
        "explain": "Explain how this code works in detail:",
        "refactor": "Suggest improvements and refactoring for this code:",
        "docs": "Generate documentation for this code:"
      }
    }
<

------------------------------------------------------------------------------
7.2 VIM Configuration                          *copilot-chat-vim-configuration*

g:copilot_chat_disable_mappings                *g:copilot_chat_disable_mappings*

Set to 1 to disable the plugins default mappings in the chat window.

g:copilot_chat_create_on_add_selection         *g:copilot_chat_create_on_add_selection*

Set to 1 to create a new chat window when adding it a visual selection to the
chat if no chat window is open. If set to 0, no action is taken when no active
chat window exists (default: 1).

g:copilot_chat_jump_to_chat_on_add_selection   *g:copilot_chat_jump_to_chat_on_add_selection*

Set to 1 to jump to the chat window when adding it a visual selection. If set
to 0, the selection is added to the active chat window, but the user remains in
the current window (default: 1).

g:copilot_reuse_active_chat                    *g:copilot_reuse_active_chat*

Set to 1 to reuse the active chat window when opening a new chat window. If set
to 0, a new chat window is always created. Note that adding selection to is
always appended to the active chat window, regardless of this setting (default:
1).

g:g:copilot_chat_data_dir                      *g:copilot_chat_data_dir*

Set to the directory where the plugin stores its data. By default, this is
`~/.vim/copilot-chat/`.

==============================================================================
8. Troubleshooting                             *copilot-chat-troubleshooting*

Authentication issues:
- If you encounter authentication problems, delete the token files:
  `~/.vim/copilot-chat/.device_token` and `~/.vim/copilot-chat/.chat_token`
- Run |:CopilotChat| again to trigger a new authentication

Connection issues:
- Ensure you have a working internet connection
- Check that your GitHub account has access to GitHub Copilot

If you continue to experience issues, please visit the GitHub repository:
https://github.com/DanBradbury/copilot-chat.vim
